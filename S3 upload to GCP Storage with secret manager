import base64
import json
import os
import boto3
import dateutil.relativedelta
from datetime import date, datetime, timedelta
from pathlib import Path
from google.cloud import storage, secretmanager

def care_voicedata(event, context):
    """Triggered from a message on a Cloud Pub/Sub topic.
    Args:
         event (dict): Event payload.
         context (google.cloud.functions.Context): Metadata for the event.
    """
    
    client = secretmanager.SecretManagerServiceClient()
    project_id = "nyt-revanalytics-prd"
    aws_id = f'projects/862256761355/secrets/s3-care-bucket-access-id/versions/latest'
    aws_secret = f'projects/862256761355/secrets/s3-care-bucket-secret-key/versions/latest'
    response_id = client.access_secret_version(name=aws_id)
    response_secret = client.access_secret_version(name=aws_secret)
    payload_id = response_id.payload.data.decode("UTF-8")
    payload_secret = response_secret.payload.data.decode("UTF-8")

    def upload_blob(bucket_name, destination_blob_name, source_data):
         storage_client = storage.Client()
         bucket = storage_client.bucket(bucket_name)
         blob = bucket.blob(destination_blob_name)
         blob.upload_from_string(
           data=json.loads(json.dumps(source_data)),
           content_type='application/json'
        )

    def voice_file_contents(access_id, secret_key):
      today = date.today()
      yesterday = (today - timedelta(days = 1)).strftime('%Y/%m/%d')
      ACCESS_KEY = access_id
      SECRET_KEY = secret_key 
      s3 = boto3.resource('s3', aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY)
      aws_bucket = s3.Bucket('nyt-amazon-connect-recordings-prd')
      aws_prefix = ('Analysis/Voice/Redacted/' + yesterday)
      objects = aws_bucket.objects.filter(Prefix=aws_prefix)   #['Contents']
      gcs_bucket = 'care_voice_data'
      
      for obj in objects:
        path, filename = os.path.split(obj.key)
        if filename.endswith('.json'):
          target = ('Redacted/' + yesterday  + '/' + filename)
          # print(target)
          # print (obj.last_modified)
          output = obj.get()['Body'].read().decode('utf-8') 
          json_data = json.loads(json.dumps(output))
          upload_blob(gcs_bucket, target, output) 

    voice_file_contents(payload_id, payload_secret)

    pubsub_message = base64.b64decode(event['data']).decode('utf-8')
    print(pubsub_message)
